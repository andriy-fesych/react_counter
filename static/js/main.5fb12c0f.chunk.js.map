{"version":3,"sources":["components/Counter/Counter.tsx","App.tsx","index.tsx"],"names":["Counter","count","addOne","add100","increase","buttonGenerator","text","method","type","onClick","App","state","setState","prevState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qPAUaA,EAA0B,SAAC,GAEjC,IADLC,EACI,EADJA,MAAOC,EACH,EADGA,OAAQC,EACX,EADWA,OAAQC,EACnB,EADmBA,SAEjBC,EAAkB,SAACC,EAAaC,GAAd,OACtB,wBAAQC,KAAK,SAASC,QAAS,kBAAMF,KAArC,SACGD,KAIL,OACE,qCACE,8CAAeL,KACdI,EAAgB,QAASH,GACzBG,EAAgB,UAAWF,GAC3BE,EAAgB,eAAgBD,OCdjCM,E,4MACJC,MAAQ,CACNV,MAAO,G,EAGTC,OAAS,WACP,EAAKU,UAAS,SAACC,GAAD,MAAgB,CAC5BZ,MAAOY,EAAUZ,MAAQ,O,EAI7BE,OAAS,WACP,EAAKS,UAAS,SAACC,GAAD,MAAgB,CAC5BZ,MAAOY,EAAUZ,MAAQ,S,EAI7BG,SAAW,kBACR,EAAKO,MAAMV,MAAQ,IAAM,GACrB,EAAKC,SAAU,EAAKC,UACrB,EAAKD,U,4CAGX,WACE,OACE,cAAC,EAAD,CACED,MAAOa,KAAKH,MAAMV,MAClBC,OAAQY,KAAKZ,OACbC,OAAQW,KAAKX,OACbC,SAAUU,KAAKV,e,GA7BLW,IAAMC,WAmCTN,IC1CfO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.5fb12c0f.chunk.js","sourcesContent":["import React from 'react';\nimport './Counter.scss';\n\ntype Props = {\n  count: number,\n  addOne: () => void,\n  add100: () => void,\n  increase: () => void,\n};\n\nexport const Counter:React.FC<Props> = ({\n  count, addOne, add100, increase,\n}) => {\n  const buttonGenerator = (text:string, method:() => void) => (\n    <button type=\"button\" onClick={() => method()}>\n      {text}\n    </button>\n  );\n\n  return (\n    <>\n      <h1>{`Count: ${count}`}</h1>\n      {buttonGenerator('add 1', addOne)}\n      {buttonGenerator('add 100', add100)}\n      {buttonGenerator('add 1 or 101', increase)}\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Counter } from './components/Counter';\n\ntype Props = {};\n\ntype State = {\n  count: number,\n};\n\nclass App extends React.Component<Props, State> {\n  state = {\n    count: 0,\n  };\n\n  addOne = () => {\n    this.setState((prevState) => ({\n      count: prevState.count + 1,\n    }));\n  };\n\n  add100 = () => {\n    this.setState((prevState) => ({\n      count: prevState.count + 100,\n    }));\n  };\n\n  increase = () => (\n    (this.state.count % 5 === 0)\n      ? (this.addOne(), this.add100())\n      : this.addOne()\n  );\n\n  render() {\n    return (\n      <Counter\n        count={this.state.count}\n        addOne={this.addOne}\n        add100={this.add100}\n        increase={this.increase}\n      />\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}